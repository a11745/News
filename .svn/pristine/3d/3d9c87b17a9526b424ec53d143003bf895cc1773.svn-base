<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.atyou.dao.CommentMapper" >
  <resultMap id="BaseResultMap" type="com.atyou.pojo.Comment" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="addtime" property="addtime" jdbcType="TIMESTAMP" />
    <result column="uptime" property="uptime" jdbcType="TIMESTAMP" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="detail_id" property="detailId" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="CommUserResultMap" type="com.atyou.pojo.CommentResult" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="userName" property="userName" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="addtime" property="addtime" jdbcType="TIMESTAMP" />
    <result column="uptime" property="uptime" jdbcType="TIMESTAMP" />
    <result column="headimage" property="headimage" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.atyou.pojo.Comment" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, addtime, uptime, user_id, detail_id
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs"  >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from `comment`
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap"  >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from `comment`
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from `comment`
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from `comment`
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample"  >
    delete from `comment`
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert"  useGeneratedKeys="true" keyProperty="id" >
    insert into `comment` (addtime, uptime, user_id, 
      detail_id, content)
    values (#{addtime,jdbcType=TIMESTAMP}, #{uptime,jdbcType=TIMESTAMP}, #{userId,jdbcType=INTEGER}, 
      #{detailId,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective"  useGeneratedKeys="true" keyProperty="id" >
    insert into `comment`
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="addtime != null" >
        addtime,
      </if>
      <if test="uptime != null" >
        uptime,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="detailId != null" >
        detail_id,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="addtime != null" >
        #{addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="uptime != null" >
        #{uptime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="detailId != null" >
        #{detailId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample"  resultType="java.lang.Integer" >
    select count(*) from `comment`
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update `comment`
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.addtime != null" >
        addtime = #{record.addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.uptime != null" >
        uptime = #{record.uptime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.detailId != null" >
        detail_id = #{record.detailId,jdbcType=INTEGER},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update `comment`
    set id = #{record.id,jdbcType=INTEGER},
      addtime = #{record.addtime,jdbcType=TIMESTAMP},
      uptime = #{record.uptime,jdbcType=TIMESTAMP},
      user_id = #{record.userId,jdbcType=INTEGER},
      detail_id = #{record.detailId,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update `comment`
    set id = #{record.id,jdbcType=INTEGER},
      addtime = #{record.addtime,jdbcType=TIMESTAMP},
      uptime = #{record.uptime,jdbcType=TIMESTAMP},
      user_id = #{record.userId,jdbcType=INTEGER},
      detail_id = #{record.detailId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective"  >
    update `comment`
    <set >
      <if test="addtime != null" >
        addtime = #{addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="uptime != null" >
        uptime = #{uptime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="detailId != null" >
        detail_id = #{detailId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" >
    update `comment`
    set addtime = #{addtime,jdbcType=TIMESTAMP},
      uptime = #{uptime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER},
      detail_id = #{detailId,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey"  >
    update `comment`
    set addtime = #{addtime,jdbcType=TIMESTAMP},
      uptime = #{uptime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER},
      detail_id = #{detailId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="queryForCount" resultType="int" >
  SELECT COUNT(id)
  FROM comment
  
  </select>
  <select id="query" resultMap="BaseResultMap">
  	SELECT  *
  	FROM comment
  	ORDER BY loginTime DESC
  	LIMIT #{start},#{pageSize}
  </select>
   <select id="queryCommUser" resultMap="CommUserResultMap">
  	SELECT a.id,a.`content` ,a.`addtime`,a.`uptime`,b.`user_name` userName,b.`phone`,b.`email`,b.`headimage` FROM comment a  
	LEFT JOIN user_info b  
	ON a.user_id = b.id
	WHERE a.`detail_id`=#{detailId}
  </select>
</mapper>